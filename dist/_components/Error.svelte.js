/* src\_components\Error.svelte generated by Svelte v3.38.2 */
import {
	SvelteComponent,
	append,
	attr,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	set_data,
	space,
	text
} from "../../_snowpack/pkg/svelte/internal.js";

function create_if_block(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*stausCode*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*stausCode*/ 2) set_data(t, /*stausCode*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment(ctx) {
	let div2;
	let div1;
	let t0;
	let div0;
	let t1_value = (/*message*/ ctx[0] || "Not Found") + "";
	let t1;
	let if_block = /*stausCode*/ ctx[1] && create_if_block(ctx);

	return {
		c() {
			div2 = element("div");
			div1 = element("div");
			if (if_block) if_block.c();
			t0 = space();
			div0 = element("div");
			t1 = text(t1_value);
			attr(div0, "class", "pl-3");
			attr(div1, "class", "flex items-center divide-x divide-gray-400 space-x-3 select-none text-lg text-gray-500");
			attr(div2, "class", "flex h-full w-full items-center justify-center");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div1);
			if (if_block) if_block.m(div1, null);
			append(div1, t0);
			append(div1, div0);
			append(div0, t1);
		},
		p(ctx, [dirty]) {
			if (/*stausCode*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(div1, t0);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*message*/ 1 && t1_value !== (t1_value = (/*message*/ ctx[0] || "Not Found") + "")) set_data(t1, t1_value);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div2);
			if (if_block) if_block.d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { message } = $$props, { stausCode } = $$props;

	$$self.$$set = $$props => {
		if ("message" in $$props) $$invalidate(0, message = $$props.message);
		if ("stausCode" in $$props) $$invalidate(1, stausCode = $$props.stausCode);
	};

	return [message, stausCode];
}

class Error extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { message: 0, stausCode: 1 });
	}
}

export default Error;